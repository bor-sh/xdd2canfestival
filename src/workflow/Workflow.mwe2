/**
 * Copyright (c) 2010-2012 Miko Kinski
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of 
 * this software and associated documentation files (the "Software"), to deal in 
 * the Software without restriction, including without limitation the rights to 
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
 * of the Software, and to permit persons to whom the Software is furnished to do 
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 */
module workflow.Workflow

import org.eclipse.xtend.typesystem.emf.*
import org.eclipse.xtend.typesystem.xsd.*
import org.eclipse.xpand2.*

// Metamodel as it known in UML describes the model 
var metamodel = "src/metamodel/canopen.ecore"
// Model is basically comes from CANeds tools exported as XDD and saved as XML
//var model     = "src/model/nameyourmodel.xml"
var model = "src/model/objectdictionary/ds404.xml"
//The Template describes the generator and is C or CPP
//var template  = "templates::ObjectDictionaryCPP::Root FOR model"
var template  = "templates::ObjectDictionaryC::Root FOR model"
var srcpath   = "src-gen/ObjectDictionary"

Workflow {

	bean			= org.eclipse.emf.mwe.utils.StandaloneSetup {
		registerEcoreFile = metamodel
	}
		
	component 		= XMLReader {
		uri   		= model
		modelSlot   = "model"
		metaModel   = XSDMetaModel {}
	}
	
	component 		= Generator {
		metaModel   = EmfMetaModel {
			metaModelFile = metamodel			
		}
		skipOnErrors	= false
		fileEncoding 	= "UTF-8" 
		expand 			= template
		outlet			= {
			path			= srcpath
			postprocessor   = output.JavaBeautifier {}
		}
				
	}
	
}